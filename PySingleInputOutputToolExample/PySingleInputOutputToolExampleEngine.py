import AlteryxPythonSDK as Sdk
import xml.etree.ElementTree as Et


class AyxPlugin():
    def __init__(self, n_tool_id, alteryx_engine, generic_engine, output_anchor_mgr):
        """Initialize members that will be used."""
        # Miscellaneous properties
        self.n_tool_id = n_tool_id
        self.name = str('PyRandomRecordSelect_') + str(self.n_tool_id)
        self.initialized = False
        # Engine handles
        self.alteryx_engine = alteryx_engine
        self.generic_engine = generic_engine
        # Output anchor management
        self.output_anchor_mgr = output_anchor_mgr
        self.output_anchor = None
        # Default configuration setting
        self.n_record_select = None
        # Record management properties
        self.record_info_in = None
        self.record_info_out = None
        self.record_creator = None
        self.record_copier = None
        self.record_cnt = 0

    def pi_init(self, str_xml):
        """Called when the Alteryx engine is ready to provide the tool configuration from the GUI."""
        root = Et.fromstring(str_xml)
        self.n_record_select = root.find('NRecords').text  # Getting the dataName data property from the GUI configuration
        self.output_anchor = self.output_anchor_mgr.get_output_anchor('Output')  # Getting the output anchor from Config.xml by the output connection name
        return

    def output_message(self, method, status, message):
        """Notifies the Alteryx engine of any message generated by a tool."""
        self.alteryx_engine.output_message(self.n_tool_id, status, method + ': ' + str(message))

    def pi_add_incoming_connection(self, str_type, str_name):
        """Called when the Alteryx engine is attempting to add an incoming data connection."""
        return self

    def pi_add_outgoing_connection(self, str_name):
        """Called when the Alteryx engine is attempting to add an outgoing data connection."""
        return True

    def pi_close(self, b_has_errors):
        """Called prior to the destruction of the tool object represented by the plugin,
        once all records have been processed."""
        pass

    def pi_push_all_records(self):
        """Called when the Alteryx engine when it's expecting the plugin to provide all of its data."""
        self.output_message('pi_push_all_records', Sdk.EngineMessageType.error, 'Missing Incoming Connection')
        return False

    def ii_init(self, record_info_in):
        """Called when the incoming connection's record metadata is available or has changed, and
        has let the Alteryx engine know what its output will look like. """
        self.record_info_in = record_info_in  # Storing the argument being passed to record_info_in parameter
        self.record_info_out = self.record_info_in  # Setting record_info_out the same as the record_info_in
        self.output_anchor.init(self.record_info_out)  # Letting the downstream tools what the output will look like
        self.record_creator = self.record_info_out.construct_record_creator()  # Creating the helper for constructing records to pass downstream
        self.record_copier = Sdk.RecordCopier(self.record_info_out, self.record_info_in)  # Setting the record_copier to copy the metadata from the input records into new output records
        # Map each column of the input to where we want it to be in the output
        for idx in range(len(self.record_info_in)):
            self.record_copier.add(idx, idx)
        self.record_copier.done_adding()
        self.initialized = True
        return True

    def ii_push_record(self, in_record):
        """Responsible for pushing records out, with a count limit set by the user in n_record_select,
        called when an input record is being sent to the plugin."""
        if not self.initialized:
            return False
        self.record_cnt += 1  # Track the record counts
        # Stop pushing records out once limit set by n_record_select is reached
        if self.record_cnt <= int(self.n_record_select):
            self.record_creator.reset()  # resets the total lengths of all the variable length fields in a record
            self.record_copier.copy(self.record_creator, in_record)  # Copy the data from the incoming record into the outgoing record
            out_record = self.record_creator.finalize_record()  # Ask the record_creator helper to give us a record we can pass downstream
            # Push the record downstream and quit if there's a downstream error
            if not self.output_anchor.push_record(out_record):
                return False
        return True

    def ii_update_progress(self, d_percent):
        """Called when the incoming connection is requesting that the plugin update its progress."""
        # output_tool_progress and update_progress will be called by the implementation
        self.alteryx_engine.output_tool_progress(self.n_tool_id, d_percent)
        self.output_anchor.update_progress(d_percent)  # d_percent is a value between 0 and 1
        return

    def ii_close(self):
        """Called when the incoming connection has finished passing all of its records."""
        self.output_anchor.close()  # Close our outgoing connections
        return


